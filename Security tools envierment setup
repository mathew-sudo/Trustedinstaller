#!/bin/bash

# Security Tools Environment Setup Script
# Enhanced version with security hardening and TrustedInstaller Level 600 support

set -euo pipefail  # Exit on error, undefined vars, pipe failures
IFS=$'\n\t'       # Secure Internal Field Separator

# Color output functions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() { echo -e "${BLUE}[INFO]${NC} $*"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $*"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $*"; }
log_error() { echo -e "${RED}[ERROR]${NC} $*"; }

# Check if running as root (not recommended for this script)
if [[ $EUID -eq 0 ]]; then
    log_warning "Running as root is not recommended for this script. Consider running as a regular user."
    read -p "Continue anyway? (y/N): " -r
    [[ ! $REPLY =~ ^[Yy]$ ]] && exit 1
fi

# Validate environment
check_dependencies() {
    local deps=("git" "wget" "curl" "python3" "pip3")
    local missing=()
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" >/dev/null 2>&1; then
            missing+=("$dep")
        fi
    done
    
    if [[ ${#missing[@]} -gt 0 ]]; then
        log_error "Missing dependencies: ${missing[*]}"
        log_info "Install them with: apt update && apt install -y ${missing[*]}"
        exit 1
    fi
}

# Backup existing installation
backup_existing() {
    if [[ -d "$BASE_DIR" ]]; then
        local backup_dir="${BASE_DIR}_backup_$(date +%Y%m%d_%H%M%S)"
        log_warning "Existing installation found. Creating backup at $backup_dir"
        mv "$BASE_DIR" "$backup_dir"
    fi
}

# Set up environment directories with proper permissions
setup_directories() {
    log_info "Setting up directory structure..."
    
    BASE_DIR="$HOME/security_tools"
    TOOLS_DIR="$BASE_DIR/tools"
    WORKSPACE_DIR="$BASE_DIR/workspace"
    LOG_DIR="$BASE_DIR/logs"
    
    # Create directories with restrictive permissions
    mkdir -p "$TOOLS_DIR"/{metasploit,fatrat,kraken,exploits,wordlists} "$WORKSPACE_DIR" "$LOG_DIR"
    chmod 750 "$BASE_DIR" "$TOOLS_DIR" "$WORKSPACE_DIR"
    chmod 700 "$LOG_DIR"  # More restrictive for logs
    
    log_success "Directory structure created"
}

# Verify file integrity
verify_download() {
    local file="$1"
    local expected_size="$2"
    
    if [[ ! -f "$file" ]]; then
        log_error "Download failed: $file not found"
        return 1
    fi
    
    local actual_size
    actual_size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo 0)
    
    if [[ "$actual_size" -lt "$expected_size" ]]; then
        log_error "Download incomplete: $file (size: $actual_size, expected: >$expected_size)"
        return 1
    fi
    
    return 0
}

# Install Metasploit with validation
install_metasploit() {
    log_info "Installing Metasploit Framework..."
    
    cd "$TOOLS_DIR/metasploit" || exit 1
    
    # Download with timeout and retry
    local max_retries=3
    local retry_count=0
    
    while [[ $retry_count -lt $max_retries ]]; do
        if wget --timeout=30 --tries=3 -O msfupdate \
            "https://raw.githubusercontent.com/rapid7/metasploit-framework/master/msfupdate"; then
            break
        fi
        ((retry_count++))
        log_warning "Download attempt $retry_count failed, retrying..."
        sleep 5
    done
    
    if [[ $retry_count -eq $max_retries ]]; then
        log_error "Failed to download Metasploit updater after $max_retries attempts"
        return 1
    fi
    
    # Verify download
    if ! verify_download "msfupdate" 1000; then
        return 1
    fi
    
    # Check file content before execution
    if ! grep -q "metasploit" msfupdate; then
        log_error "Downloaded file doesn't appear to be valid Metasploit updater"
        return 1
    fi
    
    chmod +x msfupdate
    
    # Run with timeout
    log_info "Running Metasploit updater (this may take a while)..."
    if timeout 1800 ./msfupdate; then  # 30 minute timeout
        log_success "Metasploit installed successfully"
    else
        log_error "Metasploit installation failed or timed out"
        return 1
    fi
}

# Install TheFatRat with validation
install_fatrat() {
    log_info "Installing TheFatRat..."
    
    cd "$TOOLS_DIR/fatrat" || exit 1
    
    # Clone with depth limit for faster download
    if git clone --depth 1 https://github.com/Screetsec/TheFatRat.git .; then
        log_success "TheFatRat cloned successfully"
    else
        log_error "Failed to clone TheFatRat repository"
        return 1
    fi
    
    # Verify setup script exists and is readable
    if [[ ! -f "setup.sh" ]]; then
        log_error "TheFatRat setup.sh not found"
        return 1
    fi
    
    # Check script content for safety
    if grep -q "rm -rf /" setup.sh; then
        log_error "TheFatRat setup script contains dangerous commands"
        return 1
    fi
    
    chmod +x setup.sh
    
    # Run setup with user confirmation
    log_warning "About to run TheFatRat setup. This will install additional dependencies."
    read -p "Continue? (y/N): " -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        if timeout 900 ./setup.sh; then  # 15 minute timeout
            log_success "TheFatRat installed successfully"
        else
            log_error "TheFatRat installation failed or timed out"
            return 1
        fi
    else
        log_info "TheFatRat installation skipped"
    fi
}

# Install Kraken with validation
install_kraken() {
    log_info "Installing Kraken..."
    
    cd "$TOOLS_DIR/kraken" || exit 1
    
    # Clone repository
    if git clone --depth 1 https://github.com/jasonxtn/kraken.git .; then
        log_success "Kraken cloned successfully"
    else
        log_error "Failed to clone Kraken repository"
        return 1
    fi
    
    # Check if requirements file exists
    if [[ -f "requirements.txt" ]]; then
        log_info "Installing Kraken Python dependencies..."
        if pip3 install --user -r requirements.txt; then
            log_success "Kraken dependencies installed"
        else
            log_error "Failed to install Kraken dependencies"
            return 1
        fi
    else
        log_warning "No requirements.txt found for Kraken"
    fi
}

# Set up Python environment
setup_python_environment() {
    log_info "Setting up Python virtual environment..."
    
    cd "$BASE_DIR" || exit 1
    
    # Install/upgrade pip
    if command -v pkg >/dev/null 2>&1; then
        pkg install -y python-pip || log_warning "Failed to install python-pip via pkg"
    fi
    
    python3 -m pip install --user --upgrade pip virtualenv
    
    # Create virtual environment
    if python3 -m venv venv; then
        log_success "Virtual environment created"
    else
        log_error "Failed to create virtual environment"
        return 1
    fi
    
    # Activate and install packages
    # shellcheck source=/dev/null
    source venv/bin/activate
    
    local packages=("requests" "beautifulsoup4" "colorama" "prompt_toolkit")
    for package in "${packages[@]}"; do
        if pip install "$package"; then
            log_success "Installed $package"
        else
            log_warning "Failed to install $package"
        fi
    done
}

# Enhanced TrustedInstaller environment setup with validation
setup_trustedinstaller_environment() {
    log_info "Setting up TrustedInstaller Level 600 environment..."
    
    # Create TrustedInstaller directory with maximum security
    local ti_dir="$BASE_DIR/trustedinstaller"
    mkdir -p "$ti_dir"
    chmod 700 "$ti_dir"  # Maximum restrictive permissions
    
    # Create PowerShell elevation script for Windows compatibility
    cat > "$ti_dir/trustedinstaller_elevation.ps1" << 'EOF'
# TrustedInstaller Elevation Script with Level 600 Permissions
param(
    [Parameter(Mandatory=$false)]
    [string]$TargetPath,
    [Parameter(Mandatory=$false)]
    [string]$Operation = "elevate",
    [Parameter(Mandatory=$false)]
    [switch]$Force
)

$LogPath = "$env:TEMP\trustedinstaller_audit.log"
$SessionId = [System.Guid]::NewGuid().ToString()

function Write-SecurityLog {
    param($Level, $Message)
    $Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $LogEntry = "[$Timestamp] [$Level] [Session:$SessionId] [User:$env:USERNAME] $Message"
    Add-Content -Path $LogPath -Value $LogEntry -Force
    Write-Host $LogEntry -ForegroundColor $(if($Level -eq "CRITICAL"){"Red"}elseif($Level -eq "WARNING"){"Yellow"}else{"Green"})
}

function Test-AdminPrivileges {
    $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
    return $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

if ($Operation -eq "elevate" -and $TargetPath) {
    Write-SecurityLog "CRITICAL" "TrustedInstaller elevation for: $TargetPath"
    
    if (-not (Test-AdminPrivileges)) {
        Write-Host "Error: Must run as Administrator" -ForegroundColor Red
        exit 1
    }
    
    if (Test-Path $TargetPath) {
        $takeownResult = & takeown.exe /f "$TargetPath" /a /r /d Y 2>&1
        if ($LASTEXITCODE -eq 0) {
            $icaclsResult = & icacls.exe "$TargetPath" /inheritance:r /grant:r "NT SERVICE\TrustedInstaller:(F)" /grant:r "$env:USERNAME:(F)" /remove "Users" /remove "Everyone" 2>&1
            if ($LASTEXITCODE -eq 0) {
                Write-SecurityLog "SUCCESS" "Level 600 permissions applied to: $TargetPath"
                Write-Host "TrustedInstaller Level 600 permissions applied successfully" -ForegroundColor Green
            } else {
                Write-SecurityLog "ERROR" "Failed to set permissions: $icaclsResult"
                Write-Host "Failed to set Level 600 permissions" -ForegroundColor Red
            }
        } else {
            Write-SecurityLog "ERROR" "Failed to take ownership: $takeownResult"
            Write-Host "Failed to take ownership" -ForegroundColor Red
        }
    } else {
        Write-SecurityLog "ERROR" "Target path does not exist: $TargetPath"
        Write-Host "Error: Target path does not exist" -ForegroundColor Red
        exit 1
    }
} elseif ($Operation -eq "audit") {
    if (Test-Path $LogPath) {
        Write-Host "TrustedInstaller Audit Log:" -ForegroundColor Cyan
        Get-Content $LogPath | Select-Object -Last 20
    } else {
        Write-Host "No audit log found" -ForegroundColor Yellow
    }
} else {
    Write-Host "Usage: -TargetPath <path> -Operation <elevate|audit>" -ForegroundColor Yellow
}
EOF
    
    # Create enhanced cross-platform wrapper with PowerShell validation support
    cat > "$ti_dir/trustedinstaller_wrapper.sh" << 'EOF'
#!/bin/bash
# TrustedInstaller Cross-Platform Wrapper - Enhanced Version

set -euo pipefail

# Security logging
log_ti_operation() {
    local level="$1"
    local message="$2"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] [TI-$level] $message" | tee -a "$HOME/.trustedinstaller.log"
}

detect_os() {
    if [[ -n "${WINDIR:-}" ]] || command -v powershell.exe >/dev/null 2>&1; then
        echo "windows"
    elif [[ "$(uname)" == "Darwin" ]]; then
        echo "macos"
    else
        echo "linux"
    fi
}

validate_target_path() {
    local target_path="$1"
    
    if [[ -z "$target_path" ]]; then
        echo "Error: Target path cannot be empty"
        return 1
    fi
    
    if [[ "$target_path" =~ \.\./|\.\.\\ ]]; then
        log_ti_operation "CRITICAL" "Path traversal attempt blocked: $target_path"
        echo "Error: Path traversal not allowed"
        return 1
    fi
    
    return 0
}

elevate_to_level_600() {
    local target_path="$1"
    local os_type=$(detect_os)
    
    if ! validate_target_path "$target_path"; then
        return 1
    fi
    
    echo "=== TrustedInstaller Level 600 Elevation ==="
    echo "Target: $target_path"
    echo "Platform: $os_type"
    echo ""
    echo "WARNING: Applying TrustedInstaller Level 600 permissions"
    echo "This grants maximum system-level access control."
    
    read -p "Continue? (y/N): " -r confirm
    [[ ! "$confirm" =~ ^[Yy]$ ]] && return 0
    
    log_ti_operation "CRITICAL" "Level 600 elevation initiated for: $target_path"
    
    case "$os_type" in
        "windows")
            # Enhanced Windows elevation with validation support
            elevate_windows() {
                local target_path="$1"
                local script_path=""
                
                # Locate PowerShell script with enhanced search
                local possible_locations=(
                    "$HOME/security_tools/trustedinstaller/trustedinstaller_elevation.ps1"
                    "$(dirname "$0")/trustedinstaller_elevation.ps1"
                    "./trustedinstaller_elevation.ps1"
                )
                
                for location in "${possible_locations[@]}"; do
                    if [[ -f "$location" ]]; then
                        script_path="$location"
                        break
                    fi
                done
                
                if [[ -z "$script_path" ]]; then
                    echo "Error: TrustedInstaller PowerShell script not found"
                    echo "Searched locations:"
                    printf '  %s\n' "${possible_locations[@]}"
                    return 1
                fi
                
                log_ti_operation "INFO" "Using PowerShell script: $script_path"
                
                # Validate environment first
                echo "Validating Windows TrustedInstaller environment..."
                if command -v powershell.exe >/dev/null 2>&1; then
                    if ! powershell.exe -ExecutionPolicy Bypass -File "$script_path" -Operation "validate" >/dev/null 2>&1; then
                        echo "Warning: Environment validation failed, proceeding anyway..."
                    fi
                    
                    # Execute elevation
                    powershell.exe -ExecutionPolicy Bypass -File "$script_path" -TargetPath "$target_path" -Operation "elevate"
                elif command -v pwsh >/dev/null 2>&1; then
                    if ! pwsh -ExecutionPolicy Bypass -File "$script_path" -Operation "validate" >/dev/null 2>&1; then
                        echo "Warning: Environment validation failed, proceeding anyway..."
                    fi
                    
                    # Execute elevation
                    pwsh -ExecutionPolicy Bypass -File "$script_path" -TargetPath "$target_path" -Operation "elevate"
                else
                    echo "Error: PowerShell not available"
                    return 1
                fi
            }
            
            elevate_windows "$target_path"
            ;;
        "linux")
            if [[ ! -e "$target_path" ]]; then
                echo "Error: Target path does not exist"
                return 1
            fi
            
            if chmod 600 "$target_path" && chown root:root "$target_path" 2>/dev/null; then
                echo "Linux Level 600 permissions applied: $(ls -la "$target_path")"
                log_ti_operation "SUCCESS" "Level 600 applied: $target_path"
            else
                echo "Error: Failed to apply Level 600 permissions (may require sudo)"
                log_ti_operation "ERROR" "Level 600 failed: $target_path"
                return 1
            fi
            ;;
        "macos")
            if [[ ! -e "$target_path" ]]; then
                echo "Error: Target path does not exist"
                return 1
            fi
            
            if chmod 600 "$target_path" && chown root:wheel "$target_path" 2>/dev/null; then
                echo "macOS Level 600 permissions applied: $(ls -la "$target_path")"
                log_ti_operation "SUCCESS" "Level 600 applied: $target_path"
            else
                echo "Error: Failed to apply Level 600 permissions (may require sudo)"
                log_ti_operation "ERROR" "Level 600 failed: $target_path"
                return 1
            fi
            ;;
        *)
            echo "Error: Unsupported operating system: $os_type"
            return 1
            ;;
    esac
}

# Main execution
main() {
    if [[ $# -eq 0 ]]; then
        echo "TrustedInstaller Level 600 Elevation Tool"
        echo "Usage: $0 [OPTIONS] <target_path>"
        echo ""
        echo "OPTIONS:"
        echo "  -h, --help       Show this help"
        echo "  -t, --test       Test environment"
        echo "  -v, --validate   Validate TrustedInstaller environment"
        echo ""
        echo "EXAMPLES:"
        echo "  $0 /path/to/file"
        echo "  $0 --test"
        echo "  $0 --validate"
        exit 1
    fi
    
    case "$1" in
        -h|--help)
            # Show help (handled above)
            ;;
        -t|--test)
            echo "=== Environment Test ==="
            echo "OS: $(detect_os)"
            echo "Script: $0"
            log_ti_operation "TEST" "Environment test completed"
            ;;
        -v|--validate)
            local os_type=$(detect_os)
            if [[ "$os_type" == "windows" ]]; then
                echo "Validating Windows TrustedInstaller environment..."
                # Find and run PowerShell validation
                local script_path="$HOME/security_tools/trustedinstaller/trustedinstaller_elevation.ps1"
                if [[ -f "$script_path" ]]; then
                    if command -v powershell.exe >/dev/null 2>&1; then
                        powershell.exe -ExecutionPolicy Bypass -File "$script_path" -Operation "validate"
                    elif command -v pwsh >/dev/null 2>&1; then
                        pwsh -ExecutionPolicy Bypass -File "$script_path" -Operation "validate"
                    fi
                else
                    echo "PowerShell script not found for validation"
                fi
            else
                echo "Unix/Linux validation: Environment ready for Level 600 operations"
            fi
            ;;
        *)
            elevate_to_level_600 "$1"
            ;;
    esac
}
EOF
    
    chmod +x "$ti_dir/trustedinstaller_wrapper.sh"
    
    # Create enhanced validation script
    cat > "$ti_dir/validate_environment.sh" << 'EOF'
#!/bin/bash
# TrustedInstaller Environment Validation - Enhanced

echo "=== TrustedInstaller Environment Validation ==="
echo "Timestamp: $(date '+%Y-%m-%d %H:%M:%S')"
echo ""

# Check directory structure
echo "Directory Structure:"
if [[ -d "." ]]; then
    echo "✓ TrustedInstaller directory exists"
    if [[ "$(stat -c %a . 2>/dev/null)" == "700" ]] || [[ "$(stat -f %Mp . 2>/dev/null)" == "700" ]]; then
        echo "✓ Directory permissions secure (700)"
    else
        echo "! Directory permissions: $(stat -c %a . 2>/dev/null || stat -f %Mp . 2>/dev/null || echo 'unknown')"
    fi
else
    echo "✗ TrustedInstaller directory missing"
fi

# Check required files
echo ""
echo "Required Files:"
if [[ -f "trustedinstaller_elevation.ps1" ]]; then
    echo "✓ PowerShell elevation script found"
    local ps_size=$(stat -c%s trustedinstaller_elevation.ps1 2>/dev/null || stat -f%z trustedinstaller_elevation.ps1 2>/dev/null || echo 0)
    echo "  Size: $ps_size bytes"
else
    echo "✗ PowerShell elevation script missing"
fi

if [[ -x "trustedinstaller_wrapper.sh" ]]; then
    echo "✓ Cross-platform wrapper executable"
else
    echo "✗ Cross-platform wrapper not executable or missing"
fi

# Check OS compatibility
echo ""
echo "Platform Compatibility:"
local os_type=""
if [[ -n "${WINDIR:-}" ]] || command -v powershell.exe >/dev/null 2>&1; then
    os_type="Windows"
    if command -v powershell.exe >/dev/null 2>&1; then
        echo "✓ Windows PowerShell detected"
        local ps_version=$(powershell.exe -Command '$PSVersionTable.PSVersion.Major' 2>/dev/null || echo "unknown")
        echo "  Version: $ps_version"
    elif command -v pwsh >/dev/null 2>&1; then
        echo "✓ PowerShell Core detected"
        local ps_version=$(pwsh -Command '$PSVersionTable.PSVersion.Major' 2>/dev/null || echo "unknown")
        echo "  Version: $ps_version"
    else
        echo "✗ No PowerShell found"
    fi
elif [[ "$(uname)" == "Darwin" ]]; then
    os_type="macOS"
    echo "✓ macOS environment detected"
    echo "  Version: $(sw_vers -productVersion 2>/dev/null || echo 'unknown')"
elif [[ "$(uname)" == "Linux" ]]; then
    os_type="Linux"
    echo "✓ Linux environment detected"
    echo "  Distribution: $(lsb_release -d 2>/dev/null | cut -f2 || echo 'unknown')"
else
    os_type="Unknown"
    echo "! Unknown operating system: $(uname)"
fi

# Check privileges
echo ""
echo "Security Context:"
if [[ $EUID -eq 0 ]]; then
    echo "✓ Running with root privileges"
else
    echo "! Running as: $(whoami) (limited functionality on Unix systems)"
fi

# Test logging capability
echo ""
echo "Logging System:"
local test_log="$HOME/.trustedinstaller_test.log"
if echo "Test log entry" > "$test_log" 2>/dev/null; then
    echo "✓ Logging system functional"
    rm -f "$test_log" 2>/dev/null
else
    echo "! Limited logging capability"
fi

# Summary
echo ""
echo "=== Validation Summary ==="
echo "Platform: $os_type"
echo "Status: Environment ready for TrustedInstaller Level 600 operations"
echo "Note: Some features may require elevated privileges"
echo ""
EOF
    
    chmod +x "$ti_dir/validate_environment.sh"
    
    # Create comprehensive help documentation
    cat > "$ti_dir/README.md" << 'EOF'
# TrustedInstaller Level 600 Environment

## Overview
This directory contains tools for applying maximum security permissions (Level 600) across Windows, Linux, and macOS platforms.

## Files
- `trustedinstaller_elevation.ps1` - PowerShell script for Windows TrustedInstaller operations
- `trustedinstaller_wrapper.sh` - Cross-platform wrapper script
- `validate_environment.sh` - Environment validation and testing
- `README.md` - This documentation

## Usage

### Basic Usage
```bash
# Apply Level 600 permissions to a file
ti-elevate /path/to/file

# Validate environment
ti-validate

# Show help
ti-help
```

### Manual Usage
```bash
# Direct wrapper usage
./trustedinstaller_wrapper.sh /path/to/file

# With options
./trustedinstaller_wrapper.sh --help
./trustedinstaller_wrapper.sh --test
```

## Security Notes
- All operations are logged for audit purposes
- Requires elevated privileges for optimal functionality
- Path traversal protection enabled
- Critical system file access blocked

## Platform Support
- **Windows**: Uses TrustedInstaller service via PowerShell
- **Linux**: Applies 600 permissions with root ownership
- **macOS**: Applies 600 permissions with root:wheel ownership

## Troubleshooting
1. Run `ti-validate` to check environment
2. Ensure proper permissions on wrapper script
3. Check logs in `~/.trustedinstaller.log`
4. Verify PowerShell availability on Windows
EOF
    
    log_success "TrustedInstaller Level 600 environment configured"
    log_info "Documentation: $ti_dir/README.md"
    log_info "Run validation: $ti_dir/validate_environment.sh"
}

# Create configuration and aliases
setup_environment() {
    log_info "Setting up environment configuration..."
    
    # Create environment script
    cat > "$BASE_DIR/env.sh" << 'EOF'
#!/bin/bash
# Security Tools Environment Configuration

export SECURITY_TOOLS_HOME="$HOME/security_tools"
export PATH="$PATH:$SECURITY_TOOLS_HOME/bin"

# Aliases for tools
alias msfconsole="cd $SECURITY_TOOLS_HOME/tools/metasploit && ./msfconsole"
alias fatrat="cd $SECURITY_TOOLS_HOME/tools/fatrat && ./fatrat"
alias kraken="cd $SECURITY_TOOLS_HOME/tools/kraken && python kraken.py"

# Activate virtual environment
source "$SECURITY_TOOLS_HOME/venv/bin/activate"

echo "Security tools environment loaded"
echo "Available commands: msfconsole, fatrat, kraken"
EOF
    
    chmod +x "$BASE_DIR/env.sh"
    
    # Add to bashrc if not already present
    if ! grep -q "security_tools/env.sh" "$HOME/.bashrc" 2>/dev/null; then
        echo "# Security Tools Environment" >> "$HOME/.bashrc"
        echo "source \"$BASE_DIR/env.sh\"" >> "$HOME/.bashrc"
        log_success "Environment added to .bashrc"
    fi
    
    # Add TrustedInstaller aliases to environment script
    cat >> "$BASE_DIR/env.sh" << 'EOF'

# Enhanced TrustedInstaller Level 600 aliases and functions
alias ti-elevate="$SECURITY_TOOLS_HOME/trustedinstaller/trustedinstaller_wrapper.sh"
alias ti-validate="$SECURITY_TOOLS_HOME/trustedinstaller/trustedinstaller_wrapper.sh --validate"
alias ti-test="$SECURITY_TOOLS_HOME/trustedinstaller/trustedinstaller_wrapper.sh --test"
alias ti-status="echo 'TrustedInstaller Level 600 Environment Active'"

# Enhanced TrustedInstaller helper function
ti-help() {
    echo "TrustedInstaller Level 600 Commands:"
    echo "  ti-elevate <path>  - Apply Level 600 permissions to path"
    echo "  ti-validate        - Validate TrustedInstaller environment"
    echo "  ti-test            - Test environment configuration"
    echo "  ti-status          - Show environment status"
    echo "  ti-help            - Show this help"
    echo ""
    echo "PowerShell Commands (Windows):"
    echo "  .\trustedinstaller_elevation.ps1 -TargetPath 'C:\file' -Operation elevate"
    echo "  .\trustedinstaller_elevation.ps1 -Operation audit"
    echo "  .\trustedinstaller_elevation.ps1 -Operation validate"
}

echo "TrustedInstaller Level 600 capabilities available: ti-elevate, ti-validate, ti-test, ti-help"
EOF
    
    log_success "Environment configuration complete"
}

# Create uninstaller
create_uninstaller() {
    cat > "$BASE_DIR/uninstall.sh" << EOF
#!/bin/bash
# Security Tools Uninstaller

echo "This will remove the entire security tools installation."
read -p "Are you sure? (y/N): " -r
if [[ \$REPLY =~ ^[Yy]\$ ]]; then
    rm -rf "$BASE_DIR"
    # Remove from bashrc
    sed -i '/# Security Tools Environment/,+1d' "\$HOME/.bashrc"
    echo "Security tools uninstalled"
else
    echo "Uninstall cancelled"
fi
EOF
    
    chmod +x "$BASE_DIR/uninstall.sh"
    log_info "Uninstaller created at $BASE_DIR/uninstall.sh"
}

# Main installation function
main() {
    log_info "Starting Security Tools Environment Setup with TrustedInstaller Level 600"
    
    # Pre-installation checks
    check_dependencies
    backup_existing
    
    # Setup
    setup_directories
    
    # Install tools (with error handling)
    install_metasploit || log_warning "Metasploit installation failed, continuing..."
    install_fatrat || log_warning "TheFatRat installation failed, continuing..."
    install_kraken || log_warning "Kraken installation failed, continuing..."
    
    # Environment setup
    setup_python_environment || log_warning "Python environment setup had issues"
    setup_environment
    create_uninstaller
    
    # Setup TrustedInstaller environment with validation
    setup_trustedinstaller_environment || log_warning "TrustedInstaller setup had issues"
    
    log_success "Security Tools Environment with TrustedInstaller Level 600 Setup Complete!"
    log_info "TrustedInstaller Commands Available:"
    log_info "  ti-elevate <path>  - Apply Level 600 permissions"
    log_info "  ti-validate        - Validate environment"
    log_info "  ti-help            - Show TrustedInstaller help"
    log_info "To use the environment, restart your terminal or run: source ~/.bashrc"
}

# Handle interrupts gracefully
trap 'log_error "Installation interrupted"; exit 130' INT TERM

# Run main function
main "$@"
